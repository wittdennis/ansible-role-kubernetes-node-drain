---
- name: Check if node is ready
  ansible.builtin.command:
    cmd: >-
      kubectl get node {{ kubernetes_node_name | default(inventory_hostname) }}
        -o jsonpath='{ range .status.conditions[?(@.type == "Ready")].status }{ @ }{ end }'
  register: kubectl_node_ready
  delegate_to: "{{ groups['kubernetes_control_plane'][0] }}"
  failed_when: false
  changed_when: false

- name: Check if node is schedulable
  ansible.builtin.command:
    cmd: >-
      kubectl get node {{ kubernetes_node_name | default(inventory_hostname) }} -o jsonpath='{ .spec.unschedulable }'
  register: kubectl_node_shedulable
  delegate_to: "{{ groups['kubernetes_control_plane'][0] }}"
  failed_when: false
  changed_when: false

- name: Set cordoning fact
  ansible.builtin.set_fact:
    needs_cordoning: "{{ kubectl_node_ready.stdout == 'True' and not kubectl_node_shedulable.stdout }}"

- name: Draining
  delegate_to: "{{ groups['kubernetes_control_plane'][0] }}"
  when: needs_cordoning
  block:
    - name: Cordon node
      ansible.builtin.command:
        cmd: >-
          kubectl cordon {{ kubernetes_node_name | default(inventory_hostname) }}
      changed_when: true

    - name: Drain node
      ansible.builtin.command:
        cmd: >-
          kubectl drain
            --force
            --ignore-daemonsets
            --grace-period {{ kubernetes_node_drain_grace_period }}
            --timeout {{ kubernetes_node_drain_timeout_seconds }}s
            --delete-emptydir-data {{ kubernetes_node_name | default(inventory_hostname) }}
      register: drain_result
      failed_when:
        - drain_result.rc != 0
        - not kubernetes_node_drain_fallback_enabled
      until: drain_result.rc == 0
      retries: "{{ kubernetes_node_drain_retries }}"
      delay: "{{ kubernetes_node_drain_delay_seconds }}"
      changed_when: drain_result.rc == 0

    - name: Drain node - fallback with disabled eviction
      when:
        - drain_result.rc != 0
        - kubernetes_node_drain_fallback_enabled
      ansible.builtin.command:
        cmd: >-
          kubectl drain
            --force
            --ignore-daemonsets
            --grace-period {{ kubernetes_node_drain_grace_period }}
            --timeout {{ kubernetes_node_drain_timeout_seconds }}s
            --delete-emptydir-data {{ kubernetes_node_name | default(inventory_hostname) }}
            --disable-eviction
      register: drain_fallback_result
      failed_when: drain_fallback_result.rc != 0
      until: drain_fallback_result.rc == 0
      retries: "{{ kubernetes_node_drain_retries }}"
      delay: "{{ kubernetes_node_drain_delay_seconds }}"
      changed_when: drain_fallback_result.rc == 0

  rescue:
    - name: Set node back to schedulable
      ansible.builtin.command:
        cmd: >-
          kubectl uncordon {{ kubernetes_node_name | default(inventory_hostname) }}
      register: uncordon_result
      changed_when: uncordon_result.rc == 0

    - name: Fail after rescue
      ansible.builtin.fail:
        msg: "Failed to drain node {{ kubernetes_node_name | default(inventory_hostname) }}"
